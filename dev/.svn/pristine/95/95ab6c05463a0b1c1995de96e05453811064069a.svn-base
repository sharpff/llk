#ifdef __LE_SDK__
#undef __LE_SDK__
#endif

#include "leconfig.h"
#include "protocol.h"
#include "io.h"

uint8_t ginBeCtrlToken[AES_LEN];

#if 1
#define TEST_SDK
#else
#define TEST_DEV
#endif


const uint8_t ginUUIDSDK1[MAX_UUID] = {"24e7d1f0-cbda-481a-9"};
const uint8_t ginSigSDK1[] = {
    0x53, 0xb9, 0x62, 0xa8, 0xc1, 0x52, 0xf0, 0x6d, 0xf0, 0x4f, 0x5c, 0x2a, 0x88, 0xa3, 0x50, 0x32, 
    0x59, 0x3e, 0xeb, 0xb7, 0x20, 0x5d, 0x51, 0x39, 0xff, 0xa4, 0x80, 0x94, 0xfd, 0x25, 0xad, 0x26, 
    0xa8, 0xe9, 0xd4, 0xee, 0x93, 0x24, 0x89, 0xf6, 0x47, 0x63, 0x90, 0x64, 0x04, 0xa6, 0x8f, 0x1e, 
    0x76, 0xe6, 0x25, 0x09, 0xa8, 0x17, 0xda, 0x0c, 0x74, 0x20, 0x66, 0x83, 0xbb, 0xa8, 0xbf, 0xf8, 
    0x43, 0x38, 0x8b, 0x43, 0x60, 0xbf, 0xc1, 0xff, 0x1e, 0x34, 0xa1, 0xec, 0x28, 0x2f, 0xa1, 0x2a, 
    0xc8, 0xcc, 0xd9, 0xd7, 0xdc, 0x02, 0x2a, 0x0a, 0xae, 0x4c, 0xe4, 0xfa, 0xa2, 0xa4, 0x88, 0xa9, 
    0xf6, 0x0c, 0x9a, 0x93, 0x6d, 0x08, 0x36, 0x3c, 0x30, 0x70, 0x12, 0xc2, 0x14, 0xff, 0x2b, 0xa5, 
    0x05, 0x4b, 0xe0, 0xe4, 0xa0, 0xc5, 0xad, 0x12, 0xb1, 0xa1, 0x59, 0x77, 0x3b, 0x44, 0x9e, 0xee
};
const uint8_t ginPubkeySDK1Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x82, 
    0x24, 0x79, 0x05, 0xEA, 0x23, 0x81, 0x5F, 0xC3, 0x9B, 0x0A, 
    0x24, 0xB5, 0xB6, 0x6C, 0x8C, 0xEA, 0xD8, 0x2B, 0x53, 0x64, 
    0x2A, 0x47, 0x40, 0x72, 0xC9, 0xF3, 0x17, 0x8E, 0xFA, 0x75, 
    0xC7, 0x69, 0xCA, 0x89, 0x23, 0x40, 0x05, 0x7B, 0x63, 0x2C, 
    0x08, 0x84, 0x50, 0xF1, 0xC1, 0x33, 0x2A, 0x53, 0x84, 0x15, 
    0x12, 0x00, 0x39, 0x70, 0xEB, 0x33, 0x3B, 0x5C, 0xE0, 0x0D, 
    0x1E, 0x66, 0x96, 0x4A, 0x80, 0xCA, 0x58, 0xE8, 0xC3, 0x64, 
    0xA7, 0x8A, 0xF3, 0x6B, 0x99, 0x0E, 0x1F, 0xF8, 0x0B, 0x69, 
    0x3C, 0xD3, 0xAC, 0xCB, 0x6F, 0xCC, 0x22, 0x4E, 0xB8, 0x7E, 
    0x7B, 0xEA, 0x9E, 0x29, 0xA0, 0x62, 0x36, 0x76, 0x3C, 0x3C, 
    0xC3, 0x28, 0x04, 0x26, 0x2B, 0x36, 0xF3, 0xBF, 0x82, 0x73, 
    0x3C, 0x69, 0x4E, 0x06, 0x23, 0x28, 0x50, 0x9C, 0x67, 0xD3, 
    0x92, 0x07, 0x29, 0x4A, 0x6D, 0x9A, 0xAB, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

const uint8_t ginUUIDSDK2[MAX_UUID] = {"6914eae8a5714537a395"};
const uint8_t ginSigSDK2[] = {
    0x66, 0xeb, 0xf6, 0xde, 0x82, 0x4c, 0xff, 0xce, 0xa1, 0x16, 0xac, 0x30, 0x5e, 0xfd, 0xae, 0x32, 
    0x47, 0x3a, 0xd2, 0x9e, 0x4e, 0xc1, 0x6c, 0xb1, 0x60, 0xc4, 0xce, 0x1f, 0x22, 0x2e, 0xf9, 0x28, 
    0x46, 0xdc, 0x89, 0x26, 0x58, 0xa5, 0xcd, 0x08, 0xd3, 0x45, 0x60, 0x6f, 0x55, 0x91, 0xcd, 0xc0, 
    0xa6, 0x05, 0xae, 0x97, 0x45, 0xa9, 0x15, 0x06, 0x98, 0x4f, 0xdf, 0x65, 0x62, 0x16, 0xd4, 0x2b, 
    0xc1, 0x92, 0xea, 0x1d, 0x63, 0xca, 0xa8, 0x8f, 0x6e, 0x3e, 0xde, 0x08, 0x78, 0x59, 0x71, 0xb5, 
    0x4d, 0xb1, 0xa4, 0x00, 0xf9, 0x49, 0xb0, 0xfd, 0x2d, 0xfe, 0x16, 0x3e, 0xc7, 0x84, 0x10, 0x49, 
    0xff, 0x63, 0x30, 0xc0, 0x88, 0xb8, 0x1a, 0x07, 0xd3, 0xeb, 0x90, 0x58, 0x5b, 0xde, 0xb2, 0x4f, 
    0xda, 0x74, 0x58, 0x38, 0x66, 0x58, 0x4c, 0x8e, 0x9e, 0x61, 0xad, 0x6f, 0x7a, 0xc4, 0x1c, 0x1a
};
const uint8_t ginPubkeySDK2Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x9F, 
    0xD9, 0xEB, 0xB5, 0x83, 0xAF, 0x14, 0x15, 0xBA, 0x1C, 0x64, 
    0xB4, 0x4E, 0x1F, 0xDD, 0x3F, 0xDE, 0xB1, 0x96, 0xA6, 0x72, 
    0x64, 0x3A, 0x44, 0x56, 0x48, 0xEE, 0x02, 0xDD, 0x05, 0x23, 
    0x30, 0x9D, 0x34, 0x6F, 0x89, 0xC9, 0x0E, 0xA6, 0xD3, 0xC3, 
    0x09, 0x2B, 0xF7, 0x0D, 0x6C, 0x2C, 0x82, 0x5D, 0xE5, 0x5B, 
    0x10, 0xD1, 0x41, 0xF0, 0x97, 0xCD, 0x3E, 0xEB, 0x61, 0x3A, 
    0x3D, 0xC5, 0x15, 0xD5, 0x24, 0xFD, 0x2A, 0x02, 0xDF, 0x3F, 
    0x2B, 0xEA, 0x35, 0xB8, 0x4D, 0xDC, 0xD9, 0xA9, 0xA8, 0xF3, 
    0x92, 0xE7, 0x00, 0x99, 0x1A, 0xC1, 0x69, 0xF3, 0x31, 0xA4, 
    0x4B, 0xD3, 0x58, 0x76, 0xD7, 0x37, 0x2A, 0x60, 0xA5, 0x17, 
    0x62, 0xB9, 0x3A, 0x54, 0x93, 0x6B, 0x18, 0x3B, 0x12, 0x07, 
    0x58, 0xC3, 0x2B, 0x51, 0x6B, 0x52, 0x31, 0x65, 0xD4, 0x4D, 
    0x73, 0x53, 0x09, 0x88, 0xA8, 0x04, 0xB7, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

const uint8_t ginUUIDSDK3[MAX_UUID] = {"4c689b1008a04bd89dfd"};
const uint8_t ginSigSDK3[] = {
    0x86, 0xbc, 0xd1, 0x73, 0x32, 0xff, 0xf8, 0x6b, 0x67, 0x44, 0x30, 0xe9, 0x22, 0x6f, 0x2d, 0x10, 
    0x94, 0x83, 0xb8, 0x37, 0xd5, 0xdb, 0x16, 0xe9, 0x85, 0xd4, 0xeb, 0x48, 0xdc, 0xa2, 0x91, 0xe8, 
    0x24, 0x2c, 0x25, 0x23, 0xd3, 0xf5, 0xb6, 0xf2, 0x6b, 0x99, 0xe6, 0xf5, 0xe8, 0xb6, 0xb4, 0x21, 
    0x68, 0x51, 0x87, 0xfd, 0xcf, 0x9e, 0xf8, 0x0f, 0xc3, 0x44, 0x9e, 0x49, 0xe5, 0x48, 0x77, 0x14, 
    0xf2, 0xc0, 0xf2, 0xd6, 0xd1, 0x89, 0xf2, 0x48, 0x47, 0xd3, 0x53, 0x50, 0x83, 0x86, 0x1e, 0x01, 
    0x51, 0xff, 0xae, 0xc6, 0x3f, 0xdf, 0x1a, 0x66, 0x98, 0x3c, 0x6e, 0x06, 0xb6, 0x62, 0xf0, 0x38, 
    0x04, 0x97, 0x2b, 0xe9, 0x5c, 0x57, 0x70, 0x0c, 0x05, 0xee, 0x22, 0x82, 0x6b, 0xd7, 0x94, 0x4b, 
    0x3a, 0x25, 0x8a, 0x8a, 0x75, 0xf9, 0xb9, 0x68, 0x56, 0x82, 0x41, 0x59, 0x56, 0x0e, 0x52, 0x5d
};
const uint8_t ginPubkeySDK3Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xDA, 
    0xBD, 0x49, 0x28, 0x58, 0x0E, 0x0C, 0x99, 0x41, 0x97, 0x88, 
    0x06, 0x90, 0xCF, 0xED, 0x6A, 0x6A, 0x51, 0x72, 0x15, 0xD0, 
    0x53, 0x65, 0x89, 0x30, 0x4E, 0x84, 0xD8, 0x96, 0x6A, 0xDE, 
    0x37, 0x8D, 0xEC, 0x6C, 0x7D, 0x43, 0x65, 0x4D, 0x13, 0x31, 
    0x2A, 0xAC, 0x75, 0xB0, 0xD4, 0x59, 0xEC, 0x8B, 0x45, 0xAA, 
    0x63, 0xB4, 0x89, 0x82, 0xA4, 0x68, 0x95, 0x2E, 0x09, 0x00, 
    0xE2, 0xBB, 0x9A, 0x77, 0x45, 0x85, 0x4D, 0xC0, 0x89, 0xE0, 
    0x4A, 0x9D, 0xBD, 0x9F, 0x89, 0x87, 0x15, 0xEF, 0xE6, 0x0C, 
    0x9A, 0x78, 0x1F, 0xEA, 0x77, 0x70, 0xBD, 0xE4, 0x6F, 0x4F, 
    0xB8, 0x63, 0xE2, 0x3B, 0x68, 0x02, 0x51, 0x9B, 0x55, 0x37, 
    0xAF, 0xA5, 0xDF, 0x01, 0xC8, 0x87, 0xA7, 0x72, 0xCA, 0x89, 
    0x84, 0x89, 0x0C, 0x30, 0xC2, 0x8C, 0xF2, 0x4B, 0x66, 0xAB, 
    0xE8, 0xBA, 0x54, 0xDB, 0x4B, 0x34, 0x31, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

const uint8_t ginUUIDDEV1[MAX_UUID] = {"10000100011000510005"};
const uint8_t ginSigDEV1[] = {
    0x17, 0xb9, 0xd9, 0x78, 0x06, 0x80, 0xa0, 0x49, 0x32, 0xea, 0xf2, 0x08, 0x4d, 0x7e, 0x4b, 0xb6, 
    0xcd, 0xc5, 0xcf, 0x68, 0x93, 0x84, 0x91, 0xfa, 0x6b, 0xb8, 0x90, 0xcc, 0xa1, 0x9e, 0x8d, 0x61, 
    0x53, 0x08, 0x4f, 0x67, 0x41, 0x39, 0x6c, 0x9a, 0x53, 0x3c, 0xaf, 0xa8, 0x10, 0x93, 0x67, 0x44, 
    0xb6, 0x60, 0x81, 0x05, 0xea, 0xd7, 0x2b, 0xd4, 0x8b, 0xd7, 0xb2, 0xee, 0x07, 0xa9, 0x65, 0x9c, 
    0x98, 0xc7, 0xe7, 0xd5, 0xde, 0x6e, 0xe5, 0x78, 0x9f, 0x10, 0x3e, 0xd7, 0x15, 0x7c, 0x5c, 0x16, 
    0x55, 0xe4, 0xa5, 0xf0, 0x2d, 0xe2, 0xa3, 0x4e, 0x0a, 0x6e, 0x4c, 0x8a, 0x0a, 0xa7, 0x2b, 0x51, 
    0x88, 0x96, 0x8c, 0x86, 0x4b, 0x8b, 0x73, 0x5c, 0xf1, 0xaa, 0xdf, 0xa3, 0xa3, 0xee, 0xf2, 0x98, 
    0x0a, 0x9d, 0xd9, 0xfa, 0x40, 0x29, 0x17, 0x68, 0xba, 0x2c, 0xb8, 0x02, 0x8a, 0xbf, 0xd6, 0x7d 
};
const uint8_t ginPubkeyDEV1Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xC2, 
    0xC9, 0x03, 0x30, 0xBD, 0x06, 0xAE, 0x23, 0x5F, 0xCF, 0x6E, 
    0xD4, 0x36, 0x17, 0x05, 0x53, 0x67, 0x00, 0xDC, 0x3D, 0xC0, 
    0xD7, 0x23, 0x59, 0xC4, 0x50, 0x8B, 0xEA, 0xB3, 0x3F, 0xAD, 
    0x96, 0x64, 0x33, 0xC2, 0x90, 0x96, 0x19, 0x43, 0xB0, 0x1D, 
    0xB6, 0x45, 0xDC, 0x05, 0x70, 0xF1, 0xBD, 0x73, 0xBC, 0x5E, 
    0x67, 0x5B, 0xF5, 0x14, 0xD1, 0xA1, 0x7C, 0xCF, 0x62, 0x8A, 
    0x0A, 0xAB, 0x66, 0xEA, 0x00, 0x78, 0x8D, 0x26, 0xE5, 0x6C, 
    0x96, 0x43, 0x52, 0x5B, 0xCC, 0x84, 0x04, 0xA2, 0x1A, 0x70, 
    0x94, 0x1A, 0x0D, 0xA5, 0x1D, 0xFD, 0xCC, 0x0E, 0xD8, 0x8C, 
    0x14, 0xE7, 0x86, 0xCB, 0x65, 0xE6, 0xBC, 0x12, 0xC3, 0x2D, 
    0x95, 0x4F, 0xDE, 0xE5, 0x3C, 0x80, 0x32, 0xDF, 0x4D, 0xF0, 
    0xAA, 0x5B, 0xE2, 0x56, 0xCD, 0x3A, 0xA8, 0x10, 0x16, 0x6B, 
    0x10, 0xAE, 0x48, 0x3D, 0x06, 0xE2, 0xFB, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

const uint8_t ginUUIDDEV2[MAX_UUID] = {"10000100051000310024"};
const uint8_t ginSigDEV2[] = {
    0x35, 0x86, 0x9a, 0x65, 0x15, 0x1f, 0x85, 0x1b, 0x2d, 0x8d, 0xef, 0x7a, 0x0e, 0x8f, 0x3f, 0x33, 
    0x8c, 0xd1, 0xac, 0x41, 0x3d, 0x5a, 0x55, 0xfb, 0x50, 0xb6, 0x42, 0x46, 0x4a, 0x48, 0x9a, 0xbf, 
    0x6c, 0x20, 0xb4, 0xc5, 0x89, 0xb3, 0x95, 0xad, 0x12, 0xbc, 0x13, 0x25, 0x9e, 0xa0, 0x80, 0x65, 
    0x5a, 0x78, 0x71, 0xe3, 0xf9, 0x74, 0x98, 0x4d, 0xf4, 0xcd, 0xc5, 0x03, 0xd8, 0x67, 0xbb, 0x30, 
    0x2d, 0x86, 0xf3, 0xd1, 0xbb, 0x67, 0x67, 0x9f, 0xb4, 0x28, 0xd7, 0xfd, 0x24, 0xbe, 0xc1, 0xe7, 
    0x4b, 0xfc, 0xea, 0x0c, 0x7a, 0xe6, 0x19, 0x44, 0x2c, 0xb1, 0xf7, 0xcb, 0xa6, 0x43, 0x25, 0x28, 
    0xae, 0x2d, 0xf4, 0xdc, 0x40, 0x1b, 0xec, 0xf7, 0xcb, 0xbb, 0x49, 0x29, 0xf2, 0xc8, 0x13, 0x71, 
    0x02, 0x9e, 0xa0, 0xde, 0x0b, 0x2b, 0x0d, 0xd7, 0x6b, 0xcb, 0x46, 0x46, 0x44, 0x27, 0xbf, 0x02
};
const uint8_t ginPubkeyDEV2Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x91, 
    0xCE, 0xE0, 0x39, 0xED, 0x8C, 0x76, 0xBC, 0x7E, 0xF3, 0xD5, 
    0x1A, 0x7D, 0x33, 0x3D, 0x23, 0xBF, 0xCB, 0x4C, 0xE3, 0x26, 
    0x37, 0xAA, 0x73, 0xE0, 0x93, 0x4F, 0x8E, 0xD0, 0x40, 0x7D, 
    0x86, 0x19, 0x91, 0xDD, 0xFE, 0x46, 0xEB, 0x05, 0x01, 0x6A, 
    0x96, 0xDB, 0x70, 0x85, 0x75, 0xFB, 0x5A, 0xE7, 0x30, 0x6A, 
    0xCA, 0xFD, 0x3F, 0xD1, 0xD2, 0xF8, 0x7D, 0x23, 0xD4, 0x88, 
    0x9F, 0x7E, 0x0E, 0xDA, 0xE1, 0x7F, 0x23, 0x03, 0x00, 0x23, 
    0x6F, 0x71, 0x52, 0xAD, 0xC1, 0xEC, 0x24, 0xB0, 0xC8, 0x16, 
    0x16, 0x38, 0x24, 0x8A, 0x97, 0x70, 0x14, 0x1A, 0xFF, 0x23, 
    0x54, 0x3A, 0x80, 0x86, 0x54, 0xDA, 0xC2, 0x78, 0xBF, 0x2C, 
    0x45, 0x35, 0xA1, 0xC8, 0xC8, 0x91, 0xC7, 0x81, 0x09, 0x61, 
    0x35, 0x1E, 0x01, 0xA9, 0xCC, 0x21, 0x00, 0xB6, 0xC3, 0x72, 
    0x54, 0x66, 0x4A, 0x1F, 0xEB, 0x07, 0x5B, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

const uint8_t ginUUIDDEV3[MAX_UUID] = {"10000100001000010003"};
const uint8_t ginSigDEV3[] = {
    0x3e, 0xcf, 0xba, 0x58, 0x02, 0x8e, 0x62, 0xce, 0x77, 0xda, 0x47, 0x77, 0xfe, 0xca, 0x74, 0xbe, 
    0x04, 0x4b, 0x65, 0x42, 0x27, 0xb9, 0x70, 0xbb, 0xbc, 0x9b, 0x52, 0xe0, 0x45, 0x3d, 0x9c, 0xdc, 
    0xbd, 0xee, 0x51, 0x80, 0xfd, 0x8c, 0x75, 0xc3, 0x79, 0xbb, 0x03, 0x08, 0xa1, 0x6f, 0xe5, 0xd7, 
    0xd9, 0xb5, 0x53, 0xbd, 0x1b, 0x51, 0x22, 0x9f, 0x72, 0x27, 0xf3, 0xf6, 0x7f, 0x84, 0x38, 0x43, 
    0x06, 0xcf, 0x49, 0xb8, 0xa8, 0x8b, 0x94, 0x02, 0xb0, 0x00, 0xa2, 0x3d, 0x5a, 0x21, 0x27, 0xd5, 
    0xf5, 0xd8, 0x71, 0xe4, 0x2e, 0x51, 0x1b, 0x2f, 0x8c, 0xb2, 0xec, 0xe5, 0x14, 0xca, 0x1f, 0x96, 
    0x88, 0x6f, 0x91, 0xb4, 0xc1, 0xd3, 0x02, 0x0b, 0x0d, 0xb2, 0x71, 0x43, 0x96, 0x59, 0x51, 0xb1, 
    0xfe, 0xd4, 0xb7, 0x21, 0xeb, 0xe3, 0xb8, 0x93, 0x54, 0xc8, 0x7d, 0x48, 0x4c, 0xc3, 0xdc, 0x08
};
const uint8_t ginPubkeyDEV3Der[] =
{
    0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
    0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
    0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xBA, 
    0x33, 0xE2, 0xCC, 0xBE, 0x10, 0x2F, 0xCC, 0x89, 0xCA, 0x9D, 
    0x64, 0x63, 0x69, 0x09, 0x7B, 0x3E, 0xAA, 0xE9, 0x56, 0x03, 
    0xE0, 0x6F, 0x3B, 0xD9, 0x93, 0x07, 0x7E, 0x1B, 0x04, 0xF0, 
    0x81, 0xA3, 0xBE, 0x99, 0x5F, 0x64, 0x1C, 0x52, 0xFA, 0x5E, 
    0x1A, 0x2B, 0xE3, 0x73, 0x20, 0x89, 0x2D, 0xD0, 0xE3, 0x5E, 
    0x93, 0xD8, 0x9B, 0x69, 0x9C, 0x73, 0x1D, 0x29, 0x13, 0x37, 
    0x25, 0x30, 0x48, 0x2A, 0x45, 0x05, 0x24, 0xF2, 0x81, 0x24, 
    0xEE, 0x01, 0x62, 0x75, 0x01, 0xA6, 0xC5, 0x6D, 0xCE, 0xEC, 
    0xED, 0xDE, 0xFC, 0x4E, 0x6A, 0x4F, 0x2B, 0x0B, 0x81, 0x86, 
    0xF7, 0x9B, 0xDB, 0xEE, 0xBD, 0x20, 0x85, 0x6A, 0xBA, 0x9C, 
    0x80, 0xAB, 0xE7, 0x88, 0x46, 0x96, 0x48, 0x75, 0xF6, 0x8F, 
    0xEE, 0xEA, 0xEA, 0x21, 0x4C, 0x1B, 0x19, 0x8B, 0xCE, 0xCD, 
    0x67, 0xFE, 0xF9, 0x03, 0x2D, 0xF6, 0x93, 0x02, 0x03, 0x01, 
    0x00, 0x01
};

union {  
    int number;  
    char s;  
}check;  
  
int testBigEndin() {  
    check.number = 0x01000002;  
    return (check.s == 0x01);  
}

/* ------------------------------- simulator ---------------------------------- */

void waitForInput(void *ctx) {
    char c;
    NodeData node = { 0 };
redo:

    c = getchar();
    // node.timeStamp = halGetTimeStamp();
    // node.timeoutRef = 200;
    switch (c) {
    case '\n':
        goto redo;
        break;
    case '0':
        node.cmdId = LELINK_CMD_HELLO_REQ; 
        node.subCmdId = LELINK_SUBCMD_HELLO_REQ;
        break;
    case '1':
        node.cmdId = LELINK_CMD_DISCOVER_REQ; 
        node.subCmdId = LELINK_SUBCMD_DISCOVER_REQ;
        strncpy(node.ndIP, "255.255.255.255", MAX_IPLEN); // TODO: caution
        node.ndPort = LOCAL_PORT;
        break;
    case '2':
        node.cmdId = LELINK_CMD_CTRL_REQ; 
        node.subCmdId = LELINK_SUBCMD_CTRL_CMD_REQ;
        strncpy(node.ndIP, LOCAL_TEST_IP, MAX_IPLEN); // TODO: caution 
        // strncpy(node.ndIP, "192.168.3.100", MAX_IPLEN); // TODO: caution
        node.ndPort = LOCAL_PORT;
        // APPLOG("2 cmdId[%d], subCmdId[%d]\r\n", node.cmdId, node.subCmdId);
#ifdef TEST_SDK
        if (!node.uuid[0]) {
            // uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x81};
            uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x79};
            if (ginBeCtrlToken[0]) {
                memcpy(peerToken, ginBeCtrlToken, AES_LEN);
            }
            memcpy(node.token, peerToken, sizeof(node.token)); 
        }
#endif
        break;    
    // case '2':
    //     node.cmdId = LELINK_CMD_DEVNOTICE_REQ; 
    //     node.subCmdId = LELINK_SUBCMD_DEVNOTICE_REQ; 
    //     break;
    case '3':
        node.cmdId = LELINK_CMD_CTRL_REQ; 
        node.subCmdId = LELINK_SUBCMD_CTRL_GET_STATUS_REQ;
        strncpy(node.ndIP, LOCAL_TEST_IP, MAX_IPLEN); // TODO: caution 
        // strncpy(node.ndIP, "192.168.3.100", MAX_IPLEN); // TODO: caution
        node.ndPort = LOCAL_PORT;
#ifdef TEST_SDK
        if (!node.uuid[0]) {
            // uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x81};
            uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x79};
            if (ginBeCtrlToken[0]) {
                memcpy(peerToken, ginBeCtrlToken, AES_LEN);
            }
            memcpy(node.token, peerToken, sizeof(node.token)); 
        }
#endif
        break;
    case '4':
        node.cmdId = LELINK_CMD_CLOUD_GET_TARGET_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_GET_TARGET_REQ; 
        // getOriServerIP(node.ndIP, sizeof(node.ndIP), &node.ndPort);
        break;
    case '5':
        node.cmdId = LELINK_CMD_CLOUD_HEARTBEAT_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_HEARTBEAT_REQ; 
        // getOriServerIP(node.ndIP, sizeof(node.ndIP), &node.ndPort);
        break;
    case '6': {
        node.cmdId = LELINK_CMD_CLOUD_REPORT_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_REPORT_REQ; 
        }
        break;
    case '7': {
        // set peer token
#ifdef TEST_SDK
        if (!node.uuid[0]) {
            // uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x81};
            uint8_t peerToken[] = {0x83, 0x2d, 0x62, 0x4f, 0x28, 0x84, 0x11, 0x9c, 0x42, 0xb3, 0x83, 0x29, 0xfe, 0x9a, 0xcf, 0x53};
            // uint8_t peerToken[] = {0x15, 0x7e, 0x83, 0x5e, 0x6c, 0x0b, 0xc5, 0x54, 0x74, 0xab, 0xcd, 0x91, 0xe0, 0x0e, 0x69, 0x79};
            if (ginBeCtrlToken[0]) {
                memcpy(peerToken, ginBeCtrlToken, AES_LEN);
            }
            memcpy(node.token, peerToken, sizeof(node.token)); 
        }
#endif
        // strncpy(node.ndIP, "192.168.253.4", MAX_IPLEN);
        // strncpy(node.ndIP, "192.168.1.101", MAX_IPLEN);
        // strncpy(node.ndIP, LOCAL_TEST_IP, MAX_IPLEN);
        // strncpy(node.ndIP, "172.27.35.15", MAX_IPLEN);
        // node.ndPort = TEST_PORT;
        node.cmdId = LELINK_CMD_CLOUD_MSG_CTRL_C2R_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_MSG_CTRL_C2R_REQ;

        // set peer uuid
        memcpy(node.uuid, UUID_BEING_CTRL, MAX_UUID);

        }
        break;
    case '8': {
        node.cmdId = LELINK_CMD_CLOUD_REPORT_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_REPORT_OTA_QUERY_REQ; 
        }
        break;
    case '9': {
        node.cmdId = LELINK_CMD_CLOUD_REPORT_REQ;
        node.subCmdId = LELINK_SUBCMD_CLOUD_REPORT_OTA_DO_REQ; 
        }
        break;
    }
    
    // MUTEX_LOCK;

    int counts = 1;
    // if (LELINK_CMD_DISCOVER_REQ == node.cmdId) {
    //     counts = 1;
    // }
    while (counts--)
        lelinkNwPostCmd(ctx, &node);
    // MUTEX_UNLOCK;

}

void thread_input_check(void *arg) {
    void *ctx_r2r = (void *)arg;
    while (1) {
        waitForInput(ctx_r2r);
        delayMS(100);
    }
}

// static uint8_t signatureSDK1[] = { 15, 41, -82, 122, -65, -52, 19, -111, 50, 57, 20, -121, -68, -47, 47, 110, 103, -118, -75, 114, -96, -30, 99, -13, -18, -112, 64, -128, -3, -119, 75, 29, 93, 32, -73, -120, 56, -7, 7, -56, 89, -127, -25, -82, -114, -105, 111, -86, 73, -22, -23, -51, 93, 29, 66, 69, -52, -11, 111, -120, 9, -32, -7, -74, 54, -68, 65, 117, 30, -128, -109, 5, 111, -33, 81, -89, -62, -24, -96, -112, 52, 92, 35, -110, -70, 0, 64, 121, 50, -51, -105, 16, -49, -60, -19, 127, -70, 75, 102, 27, -88, -87, 77, 21, -64, 91, -34, 19, -74, -85, 102, 47, -54, 43, 126, -127, 85, 11, -126, 9, 103, -70, 72, -23, -34, -40, 90, -26 };
// static uint8_t signatureDev1[] = { 23, -71, -39, 120, 6, -128, -96, 73, 50, -22, -14, 8, 77, 126, 75, -74, -51, -59, -49, 104, -109, -124, -111, -6, 107, -72, -112, -52, -95, -98, -115, 97, 83, 8, 79, 103, 65, 57, 108, -102, 83, 60, -81, -88, 16, -109, 103, 68, -74, 96, -127, 5, -22, -41, 43, -44, -117, -41, -78, -18, 7, -87, 101, -100, -104, -57, -25, -43, -34, 110, -27, 120, -97, 16, 62, -41, 21, 124, 92, 22, 85, -28, -91, -16, 45, -30, -93, 78, 10, 110, 76, -118, 10, -89, 43, 81, -120, -106, -116, -122, 75, -117, 115, 92, -15, -86, -33, -93, -93, -18, -14, -104, 10, -99, -39, -6, 64, 41, 23, 104, -70, 44, -72, 2, -118, -65, -42, 125 };
// static uint8_t signatureDev2[] = { 53, -122, -102, 101, 21, 31, -123, 27, 45, -115, -17, 122, 14, -113, 63, 51, -116, -47, -84, 65, 61, 90, 85, -5, 80, -74, 66, 70, 74, 72, -102, -65, 108, 32, -76, -59, -119, -77, -107, -83, 18, -68, 19, 37, -98, -96, -128, 101, 90, 120, 113, -29, -7, 116, -104, 77, -12, -51, -59, 3, -40, 103, -69, 48, 45, -122, -13, -47, -69, 103, 103, -97, -76, 40, -41, -3, 36, -66, -63, -25, 75, -4, -22, 12, 122, -26, 25, 68, 44, -79, -9, -53, -90, 67, 37, 40, -82, 45, -12, -36, 64, 27, -20, -9, -53, -69, 73, 41, -14, -56, 19, 113, 2, -98, -96, -34, 11, 43, 13, -41, 107, -53, 70, 70, 68, 39, -65, 2 };
// int genSig(uint8_t *sig, int len) {
// 	int row = 8;
// 	int col = 16;
// 	int i = 0, j = 0;
// 	for (i = 0; i < row; i++) {
// 		for (j = 0; j < col; j++) {
//     		APPPRINTF("0x%02x, ", sig[i*col + j]);
// 		}
//     	APPPRINTF("\n");
// 	}
// 	return 0;
// }

int preGenStableInfo2Flash(void) {
#include "sengine.h"
    int ret = 0;
    AuthCfg authCfg;
    PrivateCfg privateCfg;
    uint8_t mac[6] = {0};
    char macStr[13] = {0};


    const uint8_t ginScript[] = {
0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x0d, 0x0a, 0x09,
0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x0d,
0x0a, 0x20, 0x20, 0x5d, 0x5d, 0x0d, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x20, 0x63,
0x6d, 0x64, 0x20, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x72,
0x63, 0x6d, 0x64, 0x20, 0x3d, 0x20, 0x22, 0x22, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
0x20, 0x69, 0x0d, 0x0a, 0x09, 0x0d, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x3d, 0x31, 0x2c,
0x20, 0x23, 0x63, 0x6d, 0x64, 0x20, 0x64, 0x6f, 0x0d, 0x0a, 0x09, 0x09, 0x73, 0x74, 0x72, 0x63,
0x6d, 0x64, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x63, 0x6d, 0x64, 0x20, 0x2e, 0x2e, 0x20, 0x73,
0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x28, 0x63, 0x6d, 0x64, 0x5b, 0x69,
0x5d, 0x29, 0x0d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72,
0x6e, 0x20, 0x73, 0x74, 0x72, 0x63, 0x6d, 0x64, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d,
0x0a, 0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x0d, 0x0a,
0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
0x0d, 0x0a, 0x20, 0x20, 0x5d, 0x5d, 0x0d, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x28, 0x20,
0x73, 0x74, 0x61, 0x20, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x61,
0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x0d, 0x0a, 0x09, 0x6c, 0x6f,
0x63, 0x61, 0x6c, 0x20, 0x69, 0x0d, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x3d, 0x31, 0x2c,
0x20, 0x23, 0x73, 0x74, 0x61, 0x20, 0x64, 0x6f, 0x0d, 0x0a, 0x09, 0x09, 0x74, 0x61, 0x62, 0x6c,
0x65, 0x73, 0x74, 0x61, 0x5b, 0x69, 0x5d, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x3a, 0x62, 0x79,
0x74, 0x65, 0x28, 0x69, 0x29, 0x0d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x0d,
0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
0x20, 0x4c, 0x4f, 0x47, 0x54, 0x42, 0x4c, 0x28, 0x74, 0x62, 0x6c, 0x4f, 0x62, 0x6a, 0x29, 0x0d,
0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x72, 0x20, 0x3d, 0x20, 0x22, 0x22,
0x0d, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x20, 0x23, 0x74,
0x62, 0x6c, 0x4f, 0x62, 0x6a, 0x20, 0x64, 0x6f, 0x20, 0x0d, 0x0a, 0x09, 0x09, 0x73, 0x74, 0x72,
0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x66,
0x6f, 0x72, 0x6d, 0x61, 0x74, 0x28, 0x27, 0x25, 0x30, 0x32, 0x78, 0x20, 0x27, 0x2c, 0x20, 0x74,
0x62, 0x6c, 0x4f, 0x62, 0x6a, 0x5b, 0x69, 0x5d, 0x29, 0x0d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x0d,
0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x28, 0x27, 0x4c, 0x4f, 0x47, 0x54, 0x42, 0x4c,
0x20, 0x27, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x2e, 0x2e, 0x27, 0x5c, 0x72, 0x5c, 0x6e, 0x27, 0x29,
0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x4d, 0x55,
0x53, 0x54, 0x0d, 0x0a, 0x09, 0x31, 0x2e, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x20, 0x3c, 0x2d, 0x3e,
0x20, 0x62, 0x69, 0x6e, 0x0d, 0x0a, 0x09, 0x32, 0x2e, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x20, 0x3c,
0x2d, 0x3e, 0x20, 0x6a, 0x73, 0x6f, 0x6e, 0x0d, 0x0a, 0x5d, 0x5d, 0x0d, 0x0a, 0x66, 0x75, 0x6e,
0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x74, 0x43, 0x76, 0x74, 0x54, 0x79, 0x70, 0x65,
0x28, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x77, 0x68, 0x61, 0x74, 0x54,
0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x31, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0x62, 0x61, 0x75,
0x64, 0x20, 0x2d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x20, 0x70, 0x61, 0x72,
0x69, 0x74, 0x79, 0x28, 0x4e, 0x6f, 0x6e, 0x65, 0x3a, 0x30, 0x2c, 0x20, 0x4f, 0x64, 0x64, 0x3a,
0x31, 0x2c, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x3a, 0x32, 0x29, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x42,
0x69, 0x74, 0x73, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x62, 0x61, 0x75, 0x64,
0x20, 0x3d, 0x20, 0x27, 0x22, 0x39, 0x36, 0x30, 0x30, 0x2d, 0x38, 0x4e, 0x31, 0x22, 0x27, 0x0d,
0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x72, 0x20, 0x3d, 0x20, 0x73, 0x74,
0x72, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x28, 0x27, 0x7b, 0x22, 0x77,
0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x25, 0x64, 0x2c, 0x22, 0x62, 0x61, 0x75,
0x64, 0x22, 0x3a, 0x25, 0x73, 0x7d, 0x27, 0x2c, 0x20, 0x77, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
0x65, 0x2c, 0x20, 0x62, 0x61, 0x75, 0x64, 0x29, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x74,
0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x73,
0x74, 0x72, 0x29, 0x2c, 0x20, 0x73, 0x74, 0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d,
0x0a, 0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x0d, 0x0a, 0x09, 0xe6, 0x9f, 0xa5,
0xe8, 0xaf, 0xa2, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe3,
0x80, 0x82, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0xe6, 0xaf, 0x8f, 0xe4, 0xb8, 0xaa, 0xe8, 0xae, 0xbe,
0xe5, 0xa4, 0x87, 0xe9, 0x83, 0xbd, 0xe7, 0xba, 0xa6, 0xe5, 0xae, 0x9a, 0xe9, 0x9c, 0x80, 0xe8,
0xa6, 0x81, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0xe5, 0xa4,
0x9a, 0xe6, 0x9d, 0xa1, 0xe6, 0x8c, 0x87, 0xe4, 0xbb, 0xa4, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5,
0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x88, 0xb0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7,
0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe3, 0x80,
0x82, 0x0d, 0x0a, 0x09, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0xe7, 0x8a, 0xb6,
0xe6, 0x80, 0x81, 0xe7, 0x94, 0xb1, 0xe5, 0x9b, 0xba, 0xe4, 0xbb, 0xb6, 0xe6, 0x9d, 0xa5, 0xe7,
0xbc, 0x93, 0xe5, 0xad, 0x98, 0xe3, 0x80, 0x82, 0x0d, 0x0a, 0x09, 0xe6, 0x8c, 0x87, 0xe4, 0xbb,
0xa4, 0xe5, 0xbf, 0x85, 0xe9, 0xa1, 0xbb, 0xe4, 0xb8, 0xba, 0xe5, 0xae, 0x8c, 0xe6, 0x95, 0xb4,
0xe7, 0x9a, 0x84, 0xe6, 0x8c, 0x87, 0xe4, 0xbb, 0xa4, 0xef, 0xbc, 0x8c, 0xe5, 0x8f, 0xaf, 0xe4,
0xbb, 0xa5, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe5, 0xaf, 0xb9, 0xe7, 0x94, 0xb5, 0xe6, 0x8e,
0xa7, 0xe6, 0x9d, 0xbf, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x9a, 0x84, 0xe3, 0x80, 0x82,
0x0d, 0x0a, 0x09, 0xe5, 0x9c, 0xa8, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0xae, 0x9a, 0xe4,
0xb9, 0x89, 0xe4, 0xba, 0xa7, 0xe5, 0x93, 0x81, 0xe6, 0x97, 0xb6, 0xe5, 0xa1, 0xab, 0xe5, 0x85,
0x85, 0xe3, 0x80, 0x82, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0xe6, 0xa0, 0x87, 0xe5, 0x87, 0x86, 0xe6,
0x8e, 0xa5, 0xe5, 0x8f, 0xa3, 0xef, 0xbc, 0x8c, 0xe8, 0xaf, 0xa5, 0xe6, 0x96, 0xb9, 0xe6, 0xb3,
0x95, 0xe7, 0x94, 0xb1, 0xe4, 0xba, 0x91, 0xe7, 0xab, 0xaf, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8,
0xe7, 0x94, 0x9f, 0xe6, 0x88, 0x90, 0xe3, 0x80, 0x82, 0x0d, 0x0a, 0x5d, 0x5d, 0x0d, 0x0a, 0x66,
0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69,
0x65, 0x73, 0x28, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x71, 0x75, 0x65,
0x72, 0x79, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x68, 0x61, 0x72,
0x28, 0x20, 0x30, 0x78, 0x62, 0x62, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x36, 0x2c, 0x20, 0x30, 0x78,
0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20,
0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x66, 0x61,
0x2c, 0x20, 0x30, 0x78, 0x34, 0x34, 0x20, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x20, 0x3d,
0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x28, 0x20, 0x30, 0x78,
0x30, 0x39, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x20, 0x29, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x72,
0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x6e,
0x28, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x20,
0x29, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
0x2c, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x20, 0x71, 0x75,
0x65, 0x72, 0x79, 0x20, 0x29, 0x2c, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x0d, 0x0a, 0x65, 0x6e,
0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0xe6, 0x9d, 0x9c, 0xe4, 0xba, 0x9a, 0xe7, 0xaa,
0x97, 0xe5, 0xb8, 0x98, 0xe7, 0x94, 0xb5, 0xe6, 0x9c, 0xba, 0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0x62,
0x62, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30,
0x20, 0x30, 0x30, 0x20, 0x66, 0x61, 0x20, 0x34, 0x34, 0x20, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0x8e,
0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0x62, 0x62, 0x20, 0x30, 0x31, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30,
0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x66, 0x61, 0x20, 0x34, 0x34, 0x20,
0xe9, 0x80, 0x86, 0xe6, 0x97, 0xb6, 0xe9, 0x92, 0x88, 0x20, 0xe6, 0x9c, 0x89, 0xe7, 0x9b, 0xae,
0xe7, 0x9a, 0x84, 0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0x62, 0x62, 0x20, 0x30, 0x32, 0x20, 0x30, 0x30,
0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x66, 0x61, 0x20,
0x34, 0x34, 0x20, 0xe9, 0xa1, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x92, 0x88, 0x20, 0xe6, 0x9c, 0x89,
0xe7, 0x9b, 0xae, 0xe7, 0x9a, 0x84, 0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0x62, 0x62, 0x20, 0x30, 0x35,
0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20,
0x66, 0x61, 0x20, 0x34, 0x34, 0x20, 0xe6, 0xb5, 0x8b, 0xe9, 0x87, 0x8f, 0x0d, 0x0a, 0x2d, 0x2d,
0x20, 0x62, 0x62, 0x20, 0x30, 0x33, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20,
0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x66, 0x61, 0x20, 0x34, 0x34, 0x20, 0xe6, 0x9a, 0x82, 0xe5,
0x81, 0x9c, 0x0d, 0x0a, 0x2d, 0x2d, 0x20, 0x62, 0x62, 0x20, 0x30, 0x36, 0x20, 0x30, 0x30, 0x20,
0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x30, 0x30, 0x20, 0x66, 0x61, 0x20, 0x34,
0x34, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x0d, 0x0a,
0x0d, 0x0a, 0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x4d, 0x55, 0x53, 0x54, 0x0d, 0x0a, 0x5d, 0x5d, 0x0d,
0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x76, 0x74, 0x53, 0x74, 0x64,
0x32, 0x50, 0x72, 0x69, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
0x61, 0x6c, 0x20, 0x74, 0x62, 0x20, 0x3d, 0x20, 0x63, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x64, 0x65,
0x63, 0x6f, 0x64, 0x65, 0x28, 0x6a, 0x73, 0x6f, 0x6e, 0x29, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
0x61, 0x6c, 0x20, 0x63, 0x74, 0x72, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x62, 0x5b, 0x22, 0x63, 0x74,
0x72, 0x6c, 0x22, 0x5d, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x6d, 0x64,
0x54, 0x62, 0x6c, 0x20, 0x3d, 0x20, 0x7b, 0x20, 0x30, 0x78, 0x62, 0x62, 0x2c, 0x20, 0x30, 0x78,
0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20,
0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x78, 0x30, 0x30,
0x2c, 0x20, 0x30, 0x78, 0x66, 0x61, 0x2c, 0x20, 0x30, 0x78, 0x34, 0x34, 0x20, 0x7d, 0x0d, 0x0a,
0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x20, 0x3d,
0x20, 0x22, 0x22, 0x0d, 0x0a, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0xe6, 0x89, 0x93, 0xe5, 0xbc,
0x80, 0x0d, 0x0a, 0x09, 0x69, 0x66, 0x20, 0x28, 0x63, 0x74, 0x72, 0x6c, 0x5b, 0x22, 0x61, 0x63,
0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x74, 0x68, 0x65,
0x6e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x6d, 0x64, 0x54, 0x62, 0x6c, 0x5b, 0x32, 0x5d, 0x20, 0x3d,
0x20, 0x30, 0x78, 0x30, 0x32, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0xe5, 0x85, 0xb3, 0xe9, 0x97,
0xad, 0x0d, 0x0a, 0x09, 0x65, 0x6c, 0x73, 0x65, 0x69, 0x66, 0x20, 0x28, 0x63, 0x74, 0x72, 0x6c,
0x5b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x29,
0x20, 0x74, 0x68, 0x65, 0x6e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x6d, 0x64, 0x54, 0x62, 0x6c, 0x5b,
0x32, 0x5d, 0x20, 0x3d, 0x20, 0x30, 0x78, 0x30, 0x31, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0xe6,
0x9a, 0x82, 0xe5, 0x81, 0x9c, 0x0d, 0x0a, 0x09, 0x65, 0x6c, 0x73, 0x65, 0x69, 0x66, 0x20, 0x28,
0x63, 0x74, 0x72, 0x6c, 0x5b, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5d, 0x20, 0x3d,
0x3d, 0x20, 0x33, 0x29, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x0d, 0x0a, 0x09, 0x09, 0x63, 0x6d, 0x64,
0x54, 0x62, 0x6c, 0x5b, 0x32, 0x5d, 0x20, 0x3d, 0x20, 0x30, 0x78, 0x30, 0x33, 0x0d, 0x0a, 0x09,
0x2d, 0x2d, 0x20, 0xe6, 0xb5, 0x8b, 0xe9, 0x87, 0x8f, 0x0d, 0x0a, 0x09, 0x65, 0x6c, 0x73, 0x65,
0x0d, 0x0a, 0x09, 0x09, 0x63, 0x6d, 0x64, 0x54, 0x62, 0x6c, 0x5b, 0x32, 0x5d, 0x20, 0x3d, 0x20,
0x30, 0x78, 0x30, 0x35, 0x0d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47,
0x54, 0x42, 0x4c, 0x28, 0x63, 0x6d, 0x64, 0x54, 0x62, 0x6c, 0x29, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
0x2d, 0x2d, 0x20, 0x75, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b,
0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x69, 0x6e, 0x20, 0x61, 0x73, 0x20, 0x73, 0x74, 0x72,
0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75,
0x72, 0x6e, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x0d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53,
0x74, 0x72, 0x20, 0x3d, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69,
0x6e, 0x67, 0x28, 0x63, 0x6d, 0x64, 0x54, 0x62, 0x6c, 0x29, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x74,
0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x64,
0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x29, 0x2c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x2d, 0x2d, 0x5b, 0x5b, 0x20, 0x4d, 0x55,
0x53, 0x54, 0x0d, 0x0a, 0x5d, 0x5d, 0x0d, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
0x20, 0x63, 0x76, 0x74, 0x50, 0x72, 0x69, 0x32, 0x53, 0x74, 0x64, 0x28, 0x62, 0x69, 0x6e, 0x29,
0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x54, 0x62, 0x6c,
0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74,
0x72, 0x20, 0x3d, 0x20, 0x27, 0x7b, 0x22, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
0x65, 0x22, 0x3a, 0x25, 0x64, 0x7d, 0x27, 0x0d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x62,
0x6c, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c,
0x65, 0x28, 0x62, 0x69, 0x6e, 0x29, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0x66, 0x6f, 0x72, 0x20,
0x69, 0x20, 0x3d, 0x20, 0x31, 0x2c, 0x20, 0x23, 0x62, 0x69, 0x6e, 0x0d, 0x0a, 0x09, 0x2d, 0x2d,
0x20, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x28, 0x62, 0x69, 0x6e, 0x5b, 0x69, 0x5d, 0x29,
0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0x65, 0x6e, 0x64, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x54,
0x42, 0x4c, 0x28, 0x64, 0x61, 0x74, 0x61, 0x54, 0x62, 0x6c, 0x29, 0x0d, 0x0a, 0x0d, 0x0a, 0x09,
0x73, 0x74, 0x72, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72,
0x6d, 0x61, 0x74, 0x28, 0x73, 0x74, 0x72, 0x2c, 0x20, 0x31, 0x30, 0x30, 0x20, 0x2d, 0x20, 0x64,
0x61, 0x74, 0x61, 0x54, 0x62, 0x6c, 0x5b, 0x33, 0x5d, 0x29, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20,
0x73, 0x74, 0x72, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x6f, 0x72,
0x6d, 0x61, 0x74, 0x28, 0x73, 0x74, 0x72, 0x2c, 0x20, 0x23, 0x64, 0x61, 0x74, 0x61, 0x54, 0x62,
0x6c, 0x29, 0x0d, 0x0a, 0x09, 0x2d, 0x2d, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x20, 0x28, 0x73,
0x74, 0x72, 0x29, 0x0d, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x72,
0x69, 0x6e, 0x67, 0x2e, 0x6c, 0x65, 0x6e, 0x28, 0x73, 0x74, 0x72, 0x29, 0x2c, 0x20, 0x73, 0x74,
0x72, 0x0d, 0x0a, 0x65, 0x6e, 0x64, 0x0d, 0x0a
    };
    const int ginScriptSize = sizeof(ginScript);

    const char beVerifiedDEV1[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCyQMwvQauI1/PbtQ2FwVTZwDcPcDXI1nEUIvqsz+tlmQzwpCWGUOwHbZF3AVw8b1zvF5nW/UU0aF8z2KKCqtm6gB4jSblbJZDUlvMhASiGnCUGg2lHf3MDtiMFOeGy2XmvBLDLZVP3uU8gDLfTfCqW+JWzTqoEBZrEK5IPQbi+wIDAQAB";
    const char beVerifiedDEV2[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCRzuA57Yx2vH7z1Rp9Mz0jv8tM4yY3qnPgk0+O0EB9hhmR3f5G6wUBapbbcIV1+1rnMGrK/T/R0vh9I9SIn34O2uF/IwMAI29xUq3B7CSwyBYWOCSKl3AUGv8jVDqAhlTawni/LEU1ocjIkceBCWE1HgGpzCEAtsNyVGZKH+sHWwIDAQAB";
    const char beVerifiedDEV3[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC6M+LMvhAvzInKnWRjaQl7PqrpVgPgbzvZkwd+GwTwgaO+mV9kHFL6Xhor43MgiS3Q416T2JtpnHMdKRM3JTBIKkUFJPKBJO4BYnUBpsVtzuzt3vxOak8rC4GG95vb7r0ghWq6nICr54hGlkh19o/u6uohTBsZi87NZ/75Ay32kwIDAQAB";
    // duya
    const char beVerifiedDEV4[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCWgzz4zfQCCUCEDAtBMX0TxFBwTAO51LBMoLcC86Y1SLATa+neotTsJn/kjm8i9RIMKJL52gEGzvSPJ6YNcWM0a6jDTqeOT3HFigbWHVTa09q3f64vlGbAJ5wFDJ3Mf6q2PNztJ05mtsBNC6PcvMAIIQ8YRN1bEbcCb5CyCGWVIwIDAQAB";
    // hongyar
    const char beVerifiedDEV5[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrTxpVJHzbLoxSk7CzBaeyg4Czz7rANfqZUu7bD57C4fGbmfdaMEG4VfuMxWYw08OLW/f735FwVpP89YPOcjrRW/o/p76UfIS84KZCkMkFi/2InfNTm+ep2tuOlCpq7C6TTdX04MJsTpfbERqKnfuSBRbg12OEtpmRmcTmYqjosQIDAQAB";
    const char beVerifiedSDK4[] = "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCSuylVH5fmnLypsVobJEBLHtcEHldp1vUBbQXkhNGzlKo7MIWlvIdxqO2qqxIm3sffTH3EUJg034W7lJzlkP9vVGvZwEiSZXp123ZgH+nzdCJiR/CKjMGCjratPrQzwf5Elw9BWLCRhoG52lc2q0U7MWPZDEUe0FyXco+ofPKfEwIDAQAB";
    const char *remoteIP = "10.204.28.134";
    uint16_t remotePort = 5546;

    const uint8_t ginUUIDDEV1[MAX_UUID] = {"10000100011000510005"};
    const uint8_t ginSigDEV1[] = {
        0x17, 0xb9, 0xd9, 0x78, 0x06, 0x80, 0xa0, 0x49, 0x32, 0xea, 0xf2, 0x08, 0x4d, 0x7e, 0x4b, 0xb6, 
        0xcd, 0xc5, 0xcf, 0x68, 0x93, 0x84, 0x91, 0xfa, 0x6b, 0xb8, 0x90, 0xcc, 0xa1, 0x9e, 0x8d, 0x61, 
        0x53, 0x08, 0x4f, 0x67, 0x41, 0x39, 0x6c, 0x9a, 0x53, 0x3c, 0xaf, 0xa8, 0x10, 0x93, 0x67, 0x44, 
        0xb6, 0x60, 0x81, 0x05, 0xea, 0xd7, 0x2b, 0xd4, 0x8b, 0xd7, 0xb2, 0xee, 0x07, 0xa9, 0x65, 0x9c, 
        0x98, 0xc7, 0xe7, 0xd5, 0xde, 0x6e, 0xe5, 0x78, 0x9f, 0x10, 0x3e, 0xd7, 0x15, 0x7c, 0x5c, 0x16, 
        0x55, 0xe4, 0xa5, 0xf0, 0x2d, 0xe2, 0xa3, 0x4e, 0x0a, 0x6e, 0x4c, 0x8a, 0x0a, 0xa7, 0x2b, 0x51, 
        0x88, 0x96, 0x8c, 0x86, 0x4b, 0x8b, 0x73, 0x5c, 0xf1, 0xaa, 0xdf, 0xa3, 0xa3, 0xee, 0xf2, 0x98, 
        0x0a, 0x9d, 0xd9, 0xfa, 0x40, 0x29, 0x17, 0x68, 0xba, 0x2c, 0xb8, 0x02, 0x8a, 0xbf, 0xd6, 0x7d 
    };
    const uint8_t ginPubkeyDEV1Der[] =
    {
        0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
        0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
        0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xC2, 
        0xC9, 0x03, 0x30, 0xBD, 0x06, 0xAE, 0x23, 0x5F, 0xCF, 0x6E, 
        0xD4, 0x36, 0x17, 0x05, 0x53, 0x67, 0x00, 0xDC, 0x3D, 0xC0, 
        0xD7, 0x23, 0x59, 0xC4, 0x50, 0x8B, 0xEA, 0xB3, 0x3F, 0xAD, 
        0x96, 0x64, 0x33, 0xC2, 0x90, 0x96, 0x19, 0x43, 0xB0, 0x1D, 
        0xB6, 0x45, 0xDC, 0x05, 0x70, 0xF1, 0xBD, 0x73, 0xBC, 0x5E, 
        0x67, 0x5B, 0xF5, 0x14, 0xD1, 0xA1, 0x7C, 0xCF, 0x62, 0x8A, 
        0x0A, 0xAB, 0x66, 0xEA, 0x00, 0x78, 0x8D, 0x26, 0xE5, 0x6C, 
        0x96, 0x43, 0x52, 0x5B, 0xCC, 0x84, 0x04, 0xA2, 0x1A, 0x70, 
        0x94, 0x1A, 0x0D, 0xA5, 0x1D, 0xFD, 0xCC, 0x0E, 0xD8, 0x8C, 
        0x14, 0xE7, 0x86, 0xCB, 0x65, 0xE6, 0xBC, 0x12, 0xC3, 0x2D, 
        0x95, 0x4F, 0xDE, 0xE5, 0x3C, 0x80, 0x32, 0xDF, 0x4D, 0xF0, 
        0xAA, 0x5B, 0xE2, 0x56, 0xCD, 0x3A, 0xA8, 0x10, 0x16, 0x6B, 
        0x10, 0xAE, 0x48, 0x3D, 0x06, 0xE2, 0xFB, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };

    const uint8_t ginUUIDDEV2[MAX_UUID] = {"10000100051000310024"};
    const uint8_t ginSigDEV2[] = {
        0x35, 0x86, 0x9a, 0x65, 0x15, 0x1f, 0x85, 0x1b, 0x2d, 0x8d, 0xef, 0x7a, 0x0e, 0x8f, 0x3f, 0x33, 
        0x8c, 0xd1, 0xac, 0x41, 0x3d, 0x5a, 0x55, 0xfb, 0x50, 0xb6, 0x42, 0x46, 0x4a, 0x48, 0x9a, 0xbf, 
        0x6c, 0x20, 0xb4, 0xc5, 0x89, 0xb3, 0x95, 0xad, 0x12, 0xbc, 0x13, 0x25, 0x9e, 0xa0, 0x80, 0x65, 
        0x5a, 0x78, 0x71, 0xe3, 0xf9, 0x74, 0x98, 0x4d, 0xf4, 0xcd, 0xc5, 0x03, 0xd8, 0x67, 0xbb, 0x30, 
        0x2d, 0x86, 0xf3, 0xd1, 0xbb, 0x67, 0x67, 0x9f, 0xb4, 0x28, 0xd7, 0xfd, 0x24, 0xbe, 0xc1, 0xe7, 
        0x4b, 0xfc, 0xea, 0x0c, 0x7a, 0xe6, 0x19, 0x44, 0x2c, 0xb1, 0xf7, 0xcb, 0xa6, 0x43, 0x25, 0x28, 
        0xae, 0x2d, 0xf4, 0xdc, 0x40, 0x1b, 0xec, 0xf7, 0xcb, 0xbb, 0x49, 0x29, 0xf2, 0xc8, 0x13, 0x71, 
        0x02, 0x9e, 0xa0, 0xde, 0x0b, 0x2b, 0x0d, 0xd7, 0x6b, 0xcb, 0x46, 0x46, 0x44, 0x27, 0xbf, 0x02
    };
    const uint8_t ginPubkeyDEV2Der[] =
    {
        0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
        0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
        0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x91, 
        0xCE, 0xE0, 0x39, 0xED, 0x8C, 0x76, 0xBC, 0x7E, 0xF3, 0xD5, 
        0x1A, 0x7D, 0x33, 0x3D, 0x23, 0xBF, 0xCB, 0x4C, 0xE3, 0x26, 
        0x37, 0xAA, 0x73, 0xE0, 0x93, 0x4F, 0x8E, 0xD0, 0x40, 0x7D, 
        0x86, 0x19, 0x91, 0xDD, 0xFE, 0x46, 0xEB, 0x05, 0x01, 0x6A, 
        0x96, 0xDB, 0x70, 0x85, 0x75, 0xFB, 0x5A, 0xE7, 0x30, 0x6A, 
        0xCA, 0xFD, 0x3F, 0xD1, 0xD2, 0xF8, 0x7D, 0x23, 0xD4, 0x88, 
        0x9F, 0x7E, 0x0E, 0xDA, 0xE1, 0x7F, 0x23, 0x03, 0x00, 0x23, 
        0x6F, 0x71, 0x52, 0xAD, 0xC1, 0xEC, 0x24, 0xB0, 0xC8, 0x16, 
        0x16, 0x38, 0x24, 0x8A, 0x97, 0x70, 0x14, 0x1A, 0xFF, 0x23, 
        0x54, 0x3A, 0x80, 0x86, 0x54, 0xDA, 0xC2, 0x78, 0xBF, 0x2C, 
        0x45, 0x35, 0xA1, 0xC8, 0xC8, 0x91, 0xC7, 0x81, 0x09, 0x61, 
        0x35, 0x1E, 0x01, 0xA9, 0xCC, 0x21, 0x00, 0xB6, 0xC3, 0x72, 
        0x54, 0x66, 0x4A, 0x1F, 0xEB, 0x07, 0x5B, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };

    const uint8_t ginUUIDDEV3[MAX_UUID] = {"10000100001000010003"};
    const uint8_t ginSigDEV3[] = {
        0x3e, 0xcf, 0xba, 0x58, 0x02, 0x8e, 0x62, 0xce, 0x77, 0xda, 0x47, 0x77, 0xfe, 0xca, 0x74, 0xbe, 
        0x04, 0x4b, 0x65, 0x42, 0x27, 0xb9, 0x70, 0xbb, 0xbc, 0x9b, 0x52, 0xe0, 0x45, 0x3d, 0x9c, 0xdc, 
        0xbd, 0xee, 0x51, 0x80, 0xfd, 0x8c, 0x75, 0xc3, 0x79, 0xbb, 0x03, 0x08, 0xa1, 0x6f, 0xe5, 0xd7, 
        0xd9, 0xb5, 0x53, 0xbd, 0x1b, 0x51, 0x22, 0x9f, 0x72, 0x27, 0xf3, 0xf6, 0x7f, 0x84, 0x38, 0x43, 
        0x06, 0xcf, 0x49, 0xb8, 0xa8, 0x8b, 0x94, 0x02, 0xb0, 0x00, 0xa2, 0x3d, 0x5a, 0x21, 0x27, 0xd5, 
        0xf5, 0xd8, 0x71, 0xe4, 0x2e, 0x51, 0x1b, 0x2f, 0x8c, 0xb2, 0xec, 0xe5, 0x14, 0xca, 0x1f, 0x96, 
        0x88, 0x6f, 0x91, 0xb4, 0xc1, 0xd3, 0x02, 0x0b, 0x0d, 0xb2, 0x71, 0x43, 0x96, 0x59, 0x51, 0xb1, 
        0xfe, 0xd4, 0xb7, 0x21, 0xeb, 0xe3, 0xb8, 0x93, 0x54, 0xc8, 0x7d, 0x48, 0x4c, 0xc3, 0xdc, 0x08
    };
    const uint8_t ginPubkeyDEV3Der[] =
    {
        0x30, 0x81, 0x9F, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 
        0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 
        0x8D, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xBA, 
        0x33, 0xE2, 0xCC, 0xBE, 0x10, 0x2F, 0xCC, 0x89, 0xCA, 0x9D, 
        0x64, 0x63, 0x69, 0x09, 0x7B, 0x3E, 0xAA, 0xE9, 0x56, 0x03, 
        0xE0, 0x6F, 0x3B, 0xD9, 0x93, 0x07, 0x7E, 0x1B, 0x04, 0xF0, 
        0x81, 0xA3, 0xBE, 0x99, 0x5F, 0x64, 0x1C, 0x52, 0xFA, 0x5E, 
        0x1A, 0x2B, 0xE3, 0x73, 0x20, 0x89, 0x2D, 0xD0, 0xE3, 0x5E, 
        0x93, 0xD8, 0x9B, 0x69, 0x9C, 0x73, 0x1D, 0x29, 0x13, 0x37, 
        0x25, 0x30, 0x48, 0x2A, 0x45, 0x05, 0x24, 0xF2, 0x81, 0x24, 
        0xEE, 0x01, 0x62, 0x75, 0x01, 0xA6, 0xC5, 0x6D, 0xCE, 0xEC, 
        0xED, 0xDE, 0xFC, 0x4E, 0x6A, 0x4F, 0x2B, 0x0B, 0x81, 0x86, 
        0xF7, 0x9B, 0xDB, 0xEE, 0xBD, 0x20, 0x85, 0x6A, 0xBA, 0x9C, 
        0x80, 0xAB, 0xE7, 0x88, 0x46, 0x96, 0x48, 0x75, 0xF6, 0x8F, 
        0xEE, 0xEA, 0xEA, 0x21, 0x4C, 0x1B, 0x19, 0x8B, 0xCE, 0xCD, 
        0x67, 0xFE, 0xF9, 0x03, 0x2D, 0xF6, 0x93, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };

    const uint8_t ginUUIDDEV4[MAX_UUID] = {"10000100091000610006"};
    const uint8_t ginSigDEV4[] = {
        0x67, 0x19, 0x45, 0x31, 0xd6, 0x85, 0xb8, 0x68, 0x09, 0xc3, 0x76, 0x62, 0xdd, 0x79, 0x97, 0xea, 
        0x86, 0xe5, 0xf2, 0x3f, 0xc7, 0x1c, 0xdf, 0xf4, 0xc4, 0xca, 0xce, 0xce, 0xd6, 0xaa, 0xe8, 0xd9, 
        0x7e, 0xfa, 0xff, 0x6e, 0xe1, 0x28, 0xff, 0x25, 0x1d, 0x69, 0x2b, 0xa7, 0xd2, 0x24, 0x27, 0xa1, 
        0x80, 0x77, 0xb2, 0x86, 0x49, 0x07, 0xe2, 0x4d, 0x0c, 0x91, 0xd8, 0xc9, 0x06, 0x4b, 0x29, 0xb2, 
        0x00, 0xd2, 0xf2, 0x07, 0x19, 0xb8, 0x43, 0x3f, 0x91, 0x75, 0xb9, 0xfb, 0xf8, 0x05, 0x12, 0xde, 
        0x48, 0x6b, 0x2d, 0x90, 0x8c, 0xf6, 0x38, 0x9b, 0x41, 0x1e, 0x98, 0xe9, 0x45, 0x1e, 0xdd, 0x42, 
        0xd3, 0x27, 0xd8, 0xa4, 0x36, 0xdd, 0x01, 0xea, 0x98, 0x95, 0x27, 0x58, 0xb4, 0x43, 0xa6, 0x30, 
        0x9d, 0xed, 0x3b, 0x43, 0x05, 0x9c, 0xbd, 0x7d, 0x49, 0x7c, 0x23, 0xb5, 0x37, 0x26, 0x67, 0xd8
    };
    const uint8_t ginPubkeyDEV4Der[] =
    {
        0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 
        0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x96, 0x83, 0x3c, 
        0xf8, 0xcd, 0xf4, 0x02, 0x09, 0x40, 0x84, 0x0c, 0x0b, 0x41, 0x31, 0x7d, 0x13, 0xc4, 0x50, 0x70, 
        0x4c, 0x03, 0xb9, 0xd4, 0xb0, 0x4c, 0xa0, 0xb7, 0x02, 0xf3, 0xa6, 0x35, 0x48, 0xb0, 0x13, 0x6b, 
        0xe9, 0xde, 0xa2, 0xd4, 0xec, 0x26, 0x7f, 0xe4, 0x8e, 0x6f, 0x22, 0xf5, 0x12, 0x0c, 0x28, 0x92, 
        0xf9, 0xda, 0x01, 0x06, 0xce, 0xf4, 0x8f, 0x27, 0xa6, 0x0d, 0x71, 0x63, 0x34, 0x6b, 0xa8, 0xc3, 
        0x4e, 0xa7, 0x8e, 0x4f, 0x71, 0xc5, 0x8a, 0x06, 0xd6, 0x1d, 0x54, 0xda, 0xd3, 0xda, 0xb7, 0x7f, 
        0xae, 0x2f, 0x94, 0x66, 0xc0, 0x27, 0x9c, 0x05, 0x0c, 0x9d, 0xcc, 0x7f, 0xaa, 0xb6, 0x3c, 0xdc, 
        0xed, 0x27, 0x4e, 0x66, 0xb6, 0xc0, 0x4d, 0x0b, 0xa3, 0xdc, 0xbc, 0xc0, 0x08, 0x21, 0x0f, 0x18, 
        0x44, 0xdd, 0x5b, 0x11, 0xb7, 0x02, 0x6f, 0x90, 0xb2, 0x08, 0x65, 0x95, 0x23, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };

    const uint8_t ginUUIDDEV5[MAX_UUID] = {"10000100101000710007"};
    const uint8_t ginSigDEV5[] = {
0x85, 0x8f, 0x99, 0x01, 0xd5, 0xe8, 0x14, 0x15, 0x4d, 0xa3, 0x03, 0x2e, 0xa8, 0x05, 0xa3, 0x86, 
0x85, 0x2e, 0x6d, 0x0b, 0x9c, 0x76, 0x10, 0xd5, 0xa5, 0xaf, 0x09, 0xcc, 0x01, 0x43, 0xe8, 0x74, 
0xd1, 0xec, 0x99, 0x33, 0xd5, 0xc5, 0x2f, 0xae, 0xf6, 0x8c, 0x87, 0xf3, 0x85, 0x8b, 0xc2, 0xe0, 
0x4c, 0x18, 0xa7, 0x1c, 0x36, 0x87, 0xa6, 0x76, 0x41, 0xbd, 0xf0, 0xe5, 0xf7, 0x94, 0x85, 0xc9, 
0xe2, 0x41, 0xa4, 0xb1, 0x4c, 0xd6, 0x9f, 0x46, 0xd2, 0x6e, 0x3a, 0x65, 0x51, 0x12, 0x91, 0xe1, 
0x8f, 0x8d, 0x02, 0x64, 0xc5, 0xde, 0x69, 0x8d, 0x81, 0x61, 0xcd, 0xba, 0x43, 0x4a, 0x50, 0x73, 
0x31, 0x61, 0x9f, 0x60, 0xf9, 0x56, 0xae, 0x98, 0x19, 0x34, 0x67, 0x96, 0x27, 0x98, 0x55, 0x73, 
0xc9, 0x6e, 0xfe, 0x55, 0xb6, 0x39, 0x23, 0x2b, 0x23, 0x46, 0x79, 0xc4, 0x00, 0xcc, 0xab, 0x74
    };
    const uint8_t ginPubkeyDEV5Der[] =
    {
0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 
0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xab, 0x4f, 0x1a, 
0x55, 0x24, 0x7c, 0xdb, 0x2e, 0x8c, 0x52, 0x93, 0xb0, 0xb3, 0x05, 0xa7, 0xb2, 0x83, 0x80, 0xb3, 
0xcf, 0xba, 0xc0, 0x35, 0xfa, 0x99, 0x52, 0xee, 0xdb, 0x0f, 0x9e, 0xc2, 0xe1, 0xf1, 0x9b, 0x99, 
0xf7, 0x5a, 0x30, 0x41, 0xb8, 0x55, 0xfb, 0x8c, 0xc5, 0x66, 0x30, 0xd3, 0xc3, 0x8b, 0x5b, 0xf7, 
0xfb, 0xdf, 0x91, 0x70, 0x56, 0x93, 0xfc, 0xf5, 0x83, 0xce, 0x72, 0x3a, 0xd1, 0x5b, 0xfa, 0x3f, 
0xa7, 0xbe, 0x94, 0x7c, 0x84, 0xbc, 0xe0, 0xa6, 0x42, 0x90, 0xc9, 0x05, 0x8b, 0xfd, 0x88, 0x9d, 
0xf3, 0x53, 0x9b, 0xe7, 0xa9, 0xda, 0xdb, 0x8e, 0x94, 0x2a, 0x6a, 0xec, 0x2e, 0x93, 0x4d, 0xd5, 
0xf4, 0xe0, 0xc2, 0x6c, 0x4e, 0x97, 0xdb, 0x11, 0x1a, 0x8a, 0x9d, 0xfb, 0x92, 0x05, 0x16, 0xe0, 
0xd7, 0x63, 0x84, 0xb6, 0x99, 0x91, 0x99, 0xc4, 0xe6, 0x62, 0xa8, 0xe8, 0xb1, 0x02, 0x03, 0x01, 
0x00, 0x01
    };


    const uint8_t ginUUIDSDK4[MAX_UUID] = {"c21efa6fa9fa4bd8ab93"};
    const uint8_t ginSigSDK4[] = {
        0x71, 0xc0, 0x8d, 0x61, 0x8f, 0x1e, 0xfb, 0x85, 0x8d, 0x0a, 0x99, 0xeb, 0x99, 0x42, 0x89, 0x53, 
        0x22, 0x38, 0x9c, 0x4b, 0xa1, 0x60, 0xb7, 0xf8, 0xe3, 0x78, 0x6b, 0x7b, 0x16, 0x00, 0x5e, 0x87, 
        0x89, 0x7f, 0x60, 0x5a, 0x13, 0x5a, 0xc7, 0x8c, 0x61, 0xbe, 0x83, 0xf1, 0xb0, 0xd5, 0xf5, 0x38, 
        0x24, 0x39, 0xd1, 0xc2, 0xe3, 0x59, 0x64, 0xa4, 0x4c, 0x42, 0x23, 0x0a, 0x1d, 0xc6, 0xd7, 0x5c, 
        0x5e, 0x07, 0x49, 0x77, 0xc6, 0xad, 0x17, 0xd1, 0x95, 0xba, 0x8b, 0x59, 0xbc, 0x30, 0xd6, 0xac, 
        0x5c, 0xa6, 0x17, 0xf5, 0x11, 0x14, 0xfb, 0xf1, 0x78, 0xe6, 0x4d, 0xf4, 0x1c, 0x92, 0xfa, 0x9c, 
        0x5b, 0x39, 0x66, 0x5f, 0xeb, 0xbe, 0xa3, 0xa2, 0x5f, 0xfc, 0x72, 0x13, 0xb4, 0xa5, 0xad, 0x2e, 
        0x84, 0xc9, 0xef, 0x4c, 0x06, 0x0b, 0xf1, 0xd7, 0x71, 0xce, 0x1e, 0x1d, 0x19, 0x15, 0xb1, 0x40
    };
    const uint8_t ginPubkeySDK4Der[] =
    {
        0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 
        0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0x92, 0xbb, 0x29, 
        0x55, 0x1f, 0x97, 0xe6, 0x9c, 0xbc, 0xa9, 0xb1, 0x5a, 0x1b, 0x24, 0x40, 0x4b, 0x1e, 0xd7, 0x04, 
        0x1e, 0x57, 0x69, 0xd6, 0xf5, 0x01, 0x6d, 0x05, 0xe4, 0x84, 0xd1, 0xb3, 0x94, 0xaa, 0x3b, 0x30, 
        0x85, 0xa5, 0xbc, 0x87, 0x71, 0xa8, 0xed, 0xaa, 0xab, 0x12, 0x26, 0xde, 0xc7, 0xdf, 0x4c, 0x7d, 
        0xc4, 0x50, 0x98, 0x34, 0xdf, 0x85, 0xbb, 0x94, 0x9c, 0xe5, 0x90, 0xff, 0x6f, 0x54, 0x6b, 0xd9, 
        0xc0, 0x48, 0x92, 0x65, 0x7a, 0x75, 0xdb, 0x76, 0x60, 0x1f, 0xe9, 0xf3, 0x74, 0x22, 0x62, 0x47, 
        0xf0, 0x8a, 0x8c, 0xc1, 0x82, 0x8e, 0xb6, 0xad, 0x3e, 0xb4, 0x33, 0xc1, 0xfe, 0x44, 0x97, 0x0f, 
        0x41, 0x58, 0xb0, 0x91, 0x86, 0x81, 0xb9, 0xda, 0x57, 0x36, 0xab, 0x45, 0x3b, 0x31, 0x63, 0xd9, 
        0x0c, 0x45, 0x1e, 0xd0, 0x5c, 0x97, 0x72, 0x8f, 0xa8, 0x7c, 0xf2, 0x9f, 0x13, 0x02, 0x03, 0x01, 
        0x00, 0x01
    };


    const char *beVerifiedDEV = beVerifiedSDK4;
    int beVerifiedDEVLen = strlen(beVerifiedSDK4);
    const uint8_t *uuid = ginUUIDSDK4;
    const uint8_t *signature = ginSigSDK4;
    int signatureLen = sizeof(ginSigSDK4);
    const uint8_t *pubkey = ginPubkeySDK4Der;
    int pubkeyLen = sizeof(ginPubkeySDK4Der);

    /*
     * AuthCfg serilization
     */
    // verify 
    ret = rsaVerify(pubkey, pubkeyLen, beVerifiedDEV, beVerifiedDEVLen, signature, signatureLen);
    if (0 > ret) {
        APPLOGE("rsaVerify [%d]\r\n", ret);
        return -1;
    }

    ret = lelinkStorageInit(0x1C2000, 0x3E000, 0x1000);
    if (0 > ret) {
        APPLOGE("lelinkStorageInit [%d]\r\n", ret);
        return -3;
    }

    // remote ip, 10.204.28.134 is internal ip of le vpn
    strcpy(authCfg.data.remote, remoteIP);
    authCfg.data.port = remotePort;

    // uuid 
    memcpy(authCfg.data.uuid, uuid, 20);
    if (0 == halGetMac(mac, sizeof(mac))) {
        bytes2hexStr(mac, sizeof(mac), macStr, sizeof(macStr));
        memcpy(authCfg.data.uuid + 20, macStr, 12);
    }
    // pubkey
    authCfg.data.pubkeyLen = pubkeyLen;
    memcpy(authCfg.data.pubkey, pubkey, authCfg.data.pubkeyLen);

    // signature
    authCfg.data.signatureLen = signatureLen;
    memcpy(authCfg.data.signature, signature, RSA_LEN);

    if (0)
    {
        // int ret;
        // void *hdl;
        // char str[256] = {"abc"};
        // uint8_t *addr = 0x1C2000;
        // uint16_t size = sizeof(AuthCfg);

        // hdl = (void *)halFlashOpen();
        // if (NULL == hdl) {
        //     return -2;
        // }
        // APPLOG("halFlashOpen ok [%d]\r\n", ret);

        // ret = halFlashErase(hdl, addr, size);
        // if (0 > ret) {
        //     return -3;
        // }
        // APPLOG("halFlashErase ok [%d]\r\n", ret);

        // authCfg.csum = crc8(&(authCfg.data), sizeof(authCfg.data));
        // {
        //     int i = 0;
        //     uint8_t *p = (uint8_t *)&authCfg;
        //     for (i = 0; i < sizeof(authCfg.data); i++) {
        //         LEPRINTF("%02x", p[i]);
        //         if (0 == (i+1) % 16) {
        //             LEPRINTF("\r\n");
        //         }
        //     }
        //     LEPRINTF("\r\n");
        // }
        // ret = halFlashWrite(hdl, &authCfg, sizeof(AuthCfg), addr);
        // if (0 > ret) {
        //     return -4;
        // }
        // APPLOG("halFlashWrite ok [%d]\r\n", ret);

        // ret = halFlashRead(hdl, &authCfg, sizeof(AuthCfg), addr);
        // if (0 > ret) {
        //     return -5;
        // }        
        // APPLOG("halFlashRead ok [%d] [%s]\r\n", ret, str);
        // // APPLOG("flashWritePrivateCfg halFlashWrite [0x%x] [0x%x][0x%x]\r\n", hdl, fr.addr, fr.size);
        // halFlashClose(hdl);
    } else {
        ret = lelinkStorageWriteAuthCfg(&authCfg);
        if (0 > ret) {
            APPLOGE("lelinkStorageWriteAuthCfg [%d]\r\n", ret);
            lelinkStorageDeinit();
            return -3;
        }
    }

    /*
     * ScriptCfg serilization
     */
    // script
    ginScriptCfg.data.size = ginScriptSize;
    memcpy(ginScriptCfg.data.script, ginScript, ginScriptCfg.data.size);
    ret = lelinkStorageWriteScriptCfg(&ginScriptCfg);
    if (0 > ret) {
        APPLOGE("lelinkStorageWriteScriptCfg [%d]\r\n", ret);
        lelinkStorageDeinit();
        return -4;
    }

    /*
     * private info
     */
    // strcpy(privateCfg.data.nwCfg.config.ssid, "Xiaomi_A7DD");
    // strcpy(privateCfg.data.nwCfg.config.psk, "987654321");
    strcpy(privateCfg.data.nwCfg.config.ssid, "ff");
    strcpy(privateCfg.data.nwCfg.config.psk, "fengfeng2qiqi");
    privateCfg.data.nwCfg.configStatus = 1;
    // ret = lelinkStorageWritePrivateCfg(&privateCfg);
    if (0 > ret) {
        lelinkStorageDeinit();
        APPLOGE("lelinkStorageWritePrivateCfg [%d]\r\n", ret);
        return -5;
    }

    // test only
    if (1)
    {
        int ret = 0;
        AuthCfg authCfg2;
        char json[64] = {"{\"ctrl\":{\"pwr\":1,\"action\":2}}"};
        uint8_t buf[64] = {0};
        ret = lelinkStorageReadAuthCfg(&authCfg2);
        // {
        //     int i = 0;
        //     uint8_t *p = (uint8_t *)&authCfg2;
        //     for (i = 0; i < sizeof(authCfg2.data); i++) {
        //         LEPRINTF("%02x", p[i]);
        //         if (0 == (i+1) % 16) {
        //             LEPRINTF("\r\n");
        //         }
        //     }
        //     LEPRINTF("\r\n");
        // }
        if (authCfg2.csum != crc8(&(authCfg2.data), sizeof(authCfg2.data))) {
            APPLOG("AuthCfg not matched\n");
        } else {
            APPLOG("AuthCfg OK\n");
        }

        ret = lelinkStorageReadScriptCfg(&ginScriptCfg);
        if (ginScriptCfg.csum != crc8(&(ginScriptCfg.data), sizeof(ginScriptCfg.data))) {
            APPLOG("ScriptCfg not matched\n");
        } else {
            APPLOG("ScriptCfg OK\n");
        }

        ret = sengineCall((const char *)ginScriptCfg.data.script, ginScriptCfg.data.size, "cvtStd2Pri",
            (const uint8_t *)json, strlen(json), buf, sizeof(buf));
        APPLOG("sengineCall [%d]\r\n", ret);
    }
    APPLOG("DONE\r\n");


    lelinkStorageDeinit();
    return 0;
}

#define PORT_ONLY_FOR_VM 0 // (NW_SELF_PORT + 100) // the port for r2r should be 0, 
#if 1
int main(int argc, char *argv[]) {
    pthread_t id;
    int i, ret = 0;
    AuthData authData;

    // preGenStableInfo2Flash();
    // return 0;

    // {
    //     // char buf[1024] = {0};
    //     extern const uint8_t ginScript[];
    //     ret = lelinkStorageInit(0x1C2000, 0x3E000, 256);
    //     if (0 > ret) {
    //         // APPLOGE("lelinkStorageInit ret[%d]\r\n", ret);
    //     }
    //     printf(ginScript);
    //     return 0;
    // }

    //APPPRINTF("sdk1 \n");
    //ret = genSig(signatureSDK1, sizeof(signatureSDK1));
    //APPPRINTF("dev1 \n");
    //ret = genSig(signatureDev1, sizeof(signatureDev1));
    //APPPRINTF("dev2 \n");
    //ret = genSig(signatureDev2, sizeof(signatureDev2));
    APPLOG("node size [%d]\r\n", sizeof(NodeData));

    // memcpy(authData.uuid, ginUUIDSDK3, MAX_UUID);
    // authData.pubkeyLen = sizeof(ginPubkeySDK3Der);
    // memcpy(authData.pubkey, ginPubkeySDK3Der, authData.pubkeyLen);
    // authData.signatureLen = RSA_LEN;
    // memcpy(authData.signature, ginSigSDK3, authData.signatureLen);
    // lelinkInit(&authData);

    // sector 0x1000(512pcs), block 0x10000(32pcs)
    ret = lelinkStorageInit(0x1C2000, 0x3E000, 0x1000);
    if (0 > ret) {
        APPLOGE("lelinkStorageInit ret[%d]\r\n", ret);
        return -1;
    }
    ret = lelinkInit(NULL);
    if (0 > ret) {
        APPLOGE("lelinkInit failed [%d]\r\n", ret);
        return -2;
    }

    char *ip = argv[1];
    int port = atoi(argv[2]);

    if (argc != 3) {
        ip = REMOTE_IP;
        port = REMOTE_PORT;
    }

    void *ctx_r2r = (void *)lelinkNwNew(ip, port, PORT_ONLY_FOR_VM, 0);
    void *ctx_qa = (void *)lelinkNwNew(NULL, 0, NW_SELF_PORT, 0);


    ret = pthread_create(&id, NULL, (void *)thread_input_check, ctx_r2r);
    if (ret != 0) {
        APPLOGE("Create pthread error \r\n");
        return -1;
    }

    while (1) {
        lelinkDoPollingQ2A(ctx_qa);
        
        // share the QA queue to handle the remote ctrl
        lelinkDoPollingR2R(ctx_r2r);
        
        delayMS(100);

        // pollingState(0);
    }
    
    lelinkNwDelete(ctx_r2r);
    lelinkNwDelete(ctx_qa);

    return 0;
}

#else

int main(int argc, char** argv) {

    const char * configInfo = NULL;
    int ret = 0;
    //test();
    // int ret = testBigEndin();
    // int a = sizeof(double);
    // a = sizeof(CommonHeader);
    // a = sizeof(CmdHeader);
    // a = sizeof(PayloadHeader);

	uint16_t a = 512;
    uint16_t inAir = 0;
    uint16_t magic = 0x1221;

    inAir = a ^ magic;
    a = inAir ^ magic;

    // configInfo = "SSID=TP-LINK_JJFA1,PASSWD=987654321,AES=912EC803B2CE49E4A541068D495AB570,TYPE=2,DELAY=10";
    // configInfo = "SSID=Xiaomi_A7DD,PASSWD=987654321,AES=912EC803B2CE49E4A541068D495AB570,TYPE=2,DELAY=10";
    // configInfo = "SSID=360WiFi-JJFA1,PASSWD=987654321,AES=912EC803B2CE49E4A541068D495AB570,TYPE=1,DELAY=10";
    // configInfo = "SSID=TP-LINK_08F8,PASSWD=12345678,AES=912EC803B2CE49E4A541068D495AB570,TYPE=2,DELAY=10";
    configInfo = "SSID=ff,PASSWD=fengfeng2qiqi,AES=912EC803B2CE49E4A541068D495AB570,TYPE=2,DELAY=10";

    while (1) {
        ret = lelinkDoConfig(configInfo);
        if (0 > ret) {
            APPLOG("lelinkDoConfig [%d]\r\n", ret);
            delayMS(1000);
        }
    }
	return (EXIT_SUCCESS);

}

#endif

